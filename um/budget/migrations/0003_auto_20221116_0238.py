# Generated by Django 4.0.7 on 2022-11-16 02:38

from django.db import migrations

import calendar
import datetime
import random

from budget.fields import DateDuration


class HistoryGenerator:
    def __init__(self, apps, schema_editor):
        AccountsModel = apps.get_model('accounts', 'AccountsModel')
        self.SpecificPlacesModel = apps.get_model('budget', 'SpecificPlacesModel')
        self.RepeatingTransactionsModel = apps.get_model('budget', 'RepeatingTransactionsModel')
        self.TransactionsModel = apps.get_model('budget', 'TransactionsModel')
        self.BudgetsModel = apps.get_model('budget', 'BudgetsModel')
        self.apps = apps
        self.schema_editor = schema_editor
        self.account = AccountsModel.objects.get(username='demo')
        self.frequencies = [
            DateDuration(0, 0, 1),
            DateDuration(0, 0, 7),
            DateDuration(0, 0, 14),
            DateDuration(0, 1, 0),
            DateDuration(1, 0, 0),
        ]
        self.tday = datetime.date.today()
        self.set_category_transaction_amount_range()


    def generate(self):
        mockery = {
            'groceries': {
                'kroger',
                'aldi',
                'suspicious food market #57',
            },
            'utilities': {
                'aep',
                'steampunk electric',
            },
            'insurance': {
                'refridgerators forever',
                'big cars, big bucks',
            },
            'games': {
                'steam',
                'gog',
                'minecraft',
            },
            'junk food': {
                'potato chips',
                'donuts',
            },
            'medical': {
                'extra large bandaids for extra large problems',
                'contactual contacts',
            },
            'sketchy investments': {
                'that one guy with the glasses',
                'not a pyramid scheme inc. llc',
                'green lawn stocks',
            },
        }

        for category in mockery:

            budgetModel = self.generate_budget(category)
            self.set_category_transaction_amount_range()

            for place in mockery[category]:
                placeModel, was_created = self.SpecificPlacesModel.objects.get_or_create(place=place)
                placeModel.save()

                self.generate_transactions(budgetModel, placeModel)


    def generate_budget(self, category):
        budget, was_created = self.BudgetsModel.objects.get_or_create(account=self.account,
            category=category,
            defaults={
                'frequency': random.choice(self.frequencies)
            }
        )
        if was_created:
            budget.spending_limit = random.randint(10_000, 300_000) / 100.0
            budget.start_date = self.generate_random_recent_date()
            budget.save()
        return budget


    def generate_repeating_transaction(self, transactionModel):
        repeatingTransaction = self.RepeatingTransactionsModel()
        repeatingTransaction.transaction = transactionModel
        repeatingTransaction.frequency = random.choice(self.frequencies)
        repeatingTransaction.save()


    def generate_random_recent_date(self):
        year = self.tday.year - random.randint(0, 10)
        month = random.randint(1, 12)
        # calendar.monthrange returns (first_week_day, number_of_days_in_month)
        day = random.randint(1, calendar.monthrange(year, month)[1])
        return datetime.date(year, month, day)


    def set_category_transaction_amount_range(self):
        self.max_amount = random.choice([100_000, 50_000, 20_000, 10_000, 5_000])
        self.min_amount = (self.max_amount * 8) / 10
        if self.max_amount - self.min_amount < 10_000:
            self.min_amount = 100


    def get_random_transaction_amount(self):
        return random.randint(self.min_amount, self.max_amount) / 100.0


    def generate_transactions(self, budgetModel, placeModel):
        count = random.randint(1, 30)
        while count > 0:
            count -= 1
            transaction = self.TransactionsModel()
            transaction.budget = budgetModel
            transaction.place = placeModel
            transaction.date = self.generate_random_recent_date()
            
            transaction.amount = self.get_random_transaction_amount()
            transaction.account = self.account
            transaction.save()

            if random.random() < 0.25:
                self.generate_repeating_transaction(transaction)


def generate_history(apps, schema_editor):
    generator = HistoryGenerator(apps, schema_editor)
    generator.generate()


def remove_generated_history(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('budget', '0001_initial'),
        ('accounts', '0002_auto_20221118_0151'),
    ]

    operations = [
        migrations.RunPython(generate_history),
    ]
